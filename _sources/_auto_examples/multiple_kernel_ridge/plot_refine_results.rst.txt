
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/multiple_kernel_ridge/plot_refine_results.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_refine_results.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_multiple_kernel_ridge_plot_refine_results.py:


Refine multiple-kernel ridge results
====================================
This example demonstrates how to solve multiple-kernel ridge regression with
hyperparameter random search, then refine the results with hyperparameter
gradient descent.

.. GENERATED FROM PYTHON SOURCE LINES 8-18

.. code-block:: default

    import numpy as np

    from himalaya.backend import set_backend
    from himalaya.kernel_ridge import MultipleKernelRidgeCV
    from himalaya.kernel_ridge import Kernelizer
    from himalaya.kernel_ridge import ColumnKernelizer
    from himalaya.kernel_ridge import generate_dirichlet_samples

    from sklearn.pipeline import make_pipeline








.. GENERATED FROM PYTHON SOURCE LINES 19-20

In this example, we use the ``cupy`` backend (GPU).

.. GENERATED FROM PYTHON SOURCE LINES 20-23

.. code-block:: default


    backend = set_backend("cupy")








.. GENERATED FROM PYTHON SOURCE LINES 24-25

We can display the ``scikit-learn`` pipeline with an HTML diagram.

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: default

    from sklearn import set_config
    set_config(display='diagram')  # requires scikit-learn 0.23








.. GENERATED FROM PYTHON SOURCE LINES 29-35

Generate a random dataset
-------------------------
- Xs_train : list of arrays of shape (n_samples_train, n_features)
- Xs_test : list of arrays of shape (n_samples_test, n_features)
- Y_train : array of shape (n_samples_train, n_targets)
- Y_test : array of shape (n_repeat, n_samples_test, n_targets)

.. GENERATED FROM PYTHON SOURCE LINES 35-86

.. code-block:: default


    n_kernels = 4
    n_targets = 500

    # We create a few kernel weights
    rng = np.random.RandomState(42)
    kernel_weights_true = generate_dirichlet_samples(n_targets, n_kernels,
                                                     concentration=[.3],
                                                     random_state=rng)
    kernel_weights_true = backend.to_numpy(kernel_weights_true)

    # Then, we generate a random dataset, using the arbitrary scalings.
    n_samples_train = 1000
    n_samples_test = 400
    n_features_list = np.full(n_kernels, fill_value=1000)

    Xs_train, Xs_test = [], []
    Y_train, Y_test = None, None
    for ii in range(n_kernels):
        n_features = n_features_list[ii]

        X_train = rng.randn(n_samples_train, n_features)
        X_test = rng.randn(n_samples_test, n_features)
        X_train -= X_train.mean(0)
        Xs_train.append(X_train)
        Xs_test.append(X_test)

        weights = rng.randn(n_features, n_targets) / n_features
        weights *= kernel_weights_true[:, ii] ** 0.5

        if ii == 0:
            Y_train = X_train @ weights
            Y_test = X_test @ weights
        else:
            Y_train += X_train @ weights
            Y_test += X_test @ weights

    std = Y_train.std(0)[None]
    Y_train /= std
    Y_test /= std

    noise = 0.1
    Y_train += rng.randn(n_samples_train, n_targets) * noise
    Y_test += rng.randn(n_samples_test, n_targets) * noise
    Y_test -= Y_test.mean(0)
    Y_train -= Y_train.mean(0)

    # Concatenate the feature spaces.
    X_train = np.asarray(np.concatenate(Xs_train, 1), dtype="float32")
    X_test = np.asarray(np.concatenate(Xs_test, 1), dtype="float32")








.. GENERATED FROM PYTHON SOURCE LINES 87-89

Prepare the pipeline
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 89-102

.. code-block:: default


    # Find the start and end of each feature space X in Xs
    start_and_end = np.concatenate([[0], np.cumsum(n_features_list)])
    slices = [
        slice(start, end)
        for start, end in zip(start_and_end[:-1], start_and_end[1:])
    ]

    # Create a different ``Kernelizer`` for each feature space.
    kernelizers = [("space %d" % ii, Kernelizer(), slice_)
                   for ii, slice_ in enumerate(slices)]
    column_kernelizer = ColumnKernelizer(kernelizers)








.. GENERATED FROM PYTHON SOURCE LINES 103-107

Define the random-search model
------------------------------
We use very few iteration on purpose, to make the random search suboptimal,
and refine it with hyperparameter gradient descent.

.. GENERATED FROM PYTHON SOURCE LINES 107-120

.. code-block:: default


    solver_params = dict(
        n_iter=5,
        alphas=np.logspace(-10, 10, 41),
    )

    model_1 = MultipleKernelRidgeCV(kernels="precomputed", solver="random_search",
                                    solver_params=solver_params, random_state=rng)
    pipe_1 = make_pipeline(column_kernelizer, model_1)

    # Fit the model on all targets
    pipe_1.fit(X_train, Y_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | 5 random sampling with cv |     [........                                ] 20% | 0.38 sec | 5 random sampling with cv |     [................                        ] 40% | 0.75 sec | 5 random sampling with cv |     [........................                ] 60% | 1.12 sec | 5 random sampling with cv |     [................................        ] 80% | 1.49 sec | 5 random sampling with cv |     [........................................] 100% | 1.86 sec | 5 random sampling with cv | 


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-176fadda-13a2-456b-bdc4-714f5336be7f {color: black;background-color: white;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f pre{padding: 0;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-toggleable {background-color: white;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-estimator:hover {background-color: #d4ebff;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-item {z-index: 1;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-parallel-item:only-child::after {width: 0;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-176fadda-13a2-456b-bdc4-714f5336be7f div.sk-container {display: inline-block;position: relative;}</style><div id="sk-176fadda-13a2-456b-bdc4-714f5336be7f" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b44b4f3c-0d07-42dc-9de8-53324cd49275" type="checkbox" ><label class="sk-toggleable__label" for="b44b4f3c-0d07-42dc-9de8-53324cd49275">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columnkernelizer',
                     ColumnKernelizer(transformers=[('space 0', Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    ('space 1', Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    ('space 2', Kernelizer(),
                                                     slice(2000, 3000, None)),
                                                    ('space 3', Kernelizer(),
                                                     slice(3000, 4000, None))])),
                    ('multiplekernelridgecv',
                     MultipleKernelRidgeCV(kernels='precomputed',
                                           random_state=RandomState(MT199...
           1.00000000e-02, 3.16227766e-02, 1.00000000e-01, 3.16227766e-01,
           1.00000000e+00, 3.16227766e+00, 1.00000000e+01, 3.16227766e+01,
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]),
                                                          'n_iter': 5}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e88ef26f-1c7d-42b4-bc40-d78169e249e8" type="checkbox" ><label class="sk-toggleable__label" for="e88ef26f-1c7d-42b4-bc40-d78169e249e8">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[('space 0', Kernelizer(), slice(0, 1000, None)),
                                   ('space 1', Kernelizer(),
                                    slice(1000, 2000, None)),
                                   ('space 2', Kernelizer(),
                                    slice(2000, 3000, None)),
                                   ('space 3', Kernelizer(),
                                    slice(3000, 4000, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8fa0ca09-a639-47ae-9c1b-bcf74ab1ffa7" type="checkbox" ><label class="sk-toggleable__label" for="8fa0ca09-a639-47ae-9c1b-bcf74ab1ffa7">space 0</label><div class="sk-toggleable__content"><pre>slice(0, 1000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a0d85496-4323-4c18-8bdb-a07bdf31b22f" type="checkbox" ><label class="sk-toggleable__label" for="a0d85496-4323-4c18-8bdb-a07bdf31b22f">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="77817e33-351f-4e16-9716-3adf3442b213" type="checkbox" ><label class="sk-toggleable__label" for="77817e33-351f-4e16-9716-3adf3442b213">space 1</label><div class="sk-toggleable__content"><pre>slice(1000, 2000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3299a2d1-768e-4e5b-b949-49fa5ee8dcad" type="checkbox" ><label class="sk-toggleable__label" for="3299a2d1-768e-4e5b-b949-49fa5ee8dcad">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="786aabaa-7025-4c9a-905d-7f36a1f12a4e" type="checkbox" ><label class="sk-toggleable__label" for="786aabaa-7025-4c9a-905d-7f36a1f12a4e">space 2</label><div class="sk-toggleable__content"><pre>slice(2000, 3000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="24018df0-6613-4cb6-93bd-54da9412e238" type="checkbox" ><label class="sk-toggleable__label" for="24018df0-6613-4cb6-93bd-54da9412e238">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0993eac6-a38d-48a4-ae7c-c41144f43dcd" type="checkbox" ><label class="sk-toggleable__label" for="0993eac6-a38d-48a4-ae7c-c41144f43dcd">space 3</label><div class="sk-toggleable__content"><pre>slice(3000, 4000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="bd99cc76-20db-45e9-bead-8e54a7d9f9b5" type="checkbox" ><label class="sk-toggleable__label" for="bd99cc76-20db-45e9-bead-8e54a7d9f9b5">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="84d75218-217e-4a16-a080-ed86f5343975" type="checkbox" ><label class="sk-toggleable__label" for="84d75218-217e-4a16-a080-ed86f5343975">MultipleKernelRidgeCV</label><div class="sk-toggleable__content"><pre>MultipleKernelRidgeCV(kernels='precomputed',
                          random_state=RandomState(MT19937) at 0x7F2B16A58150,
                          solver_params={'alphas': array([1.00000000e-10, 3.16227766e-10, 1.00000000e-09, 3.16227766e-09,
           1.00000000e-08, 3.16227766e-08, 1.00000000e-07, 3.16227766e-07,
           1.00000000e-06, 3.16227766e-06, 1.00000000e-05, 3.16227766e-05,
           1.00000000e-04, 3.16227766e-04, 1.00000000e-03,...
           1.00000000e-02, 3.16227766e-02, 1.00000000e-01, 3.16227766e-01,
           1.00000000e+00, 3.16227766e+00, 1.00000000e+01, 3.16227766e+01,
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]),
                                         'n_iter': 5})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 121-123

Define the gradient-descent model
---------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 123-135

.. code-block:: default


    solver_params = dict(
        max_iter=100,
        hyper_gradient_method="direct",
        max_iter_inner_hyper=10,
        initial_deltas="here_will_go_the_previous_deltas"
    )

    model_2 = MultipleKernelRidgeCV(kernels="precomputed", solver="hyper_gradient",
                                    solver_params=solver_params)
    pipe_2 = make_pipeline(column_kernelizer, model_2)








.. GENERATED FROM PYTHON SOURCE LINES 136-138

Use the random-search to initialize the gradient-descent
--------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 138-148

.. code-block:: default


    # We might want to refine only the best predicting targets, since the
    # hyperparameter gradient descent is less efficient over many targets.
    top = 60  # top 60%
    best_cv_scores = backend.to_numpy(pipe_1[-1].cv_scores_.max(0))
    mask = best_cv_scores > np.percentile(best_cv_scores, 100 - top)

    pipe_2[-1].solver_params['initial_deltas'] = pipe_1[-1].deltas_[:, mask]
    pipe_2.fit(X_train, Y_train[:, mask])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | hypergradient_direct |     [                                        ] 0% | 0.00 sec | hypergradient_direct |     [                                        ] 1% | 0.49 sec | hypergradient_direct |     [                                        ] 2% | 0.60 sec | hypergradient_direct |     [.                                       ] 3% | 0.71 sec | hypergradient_direct |     [.                                       ] 4% | 0.82 sec | hypergradient_direct |     [..                                      ] 5% | 0.93 sec | hypergradient_direct |     [..                                      ] 6% | 1.04 sec | hypergradient_direct |     [..                                      ] 7% | 1.15 sec | hypergradient_direct |     [...                                     ] 8% | 1.26 sec | hypergradient_direct |     [...                                     ] 9% | 1.37 sec | hypergradient_direct |     [....                                    ] 10% | 1.48 sec | hypergradient_direct |     [....                                    ] 11% | 1.59 sec | hypergradient_direct |     [....                                    ] 12% | 1.70 sec | hypergradient_direct |     [.....                                   ] 13% | 1.81 sec | hypergradient_direct |     [.....                                   ] 14% | 1.91 sec | hypergradient_direct |     [......                                  ] 15% | 2.02 sec | hypergradient_direct |     [......                                  ] 16% | 2.13 sec | hypergradient_direct |     [......                                  ] 17% | 2.24 sec | hypergradient_direct |     [.......                                 ] 18% | 2.35 sec | hypergradient_direct |     [.......                                 ] 19% | 2.46 sec | hypergradient_direct |     [........                                ] 20% | 2.57 sec | hypergradient_direct |     [........                                ] 21% | 2.68 sec | hypergradient_direct |     [........                                ] 22% | 2.79 sec | hypergradient_direct |     [.........                               ] 23% | 2.90 sec | hypergradient_direct |     [.........                               ] 24% | 3.01 sec | hypergradient_direct |     [..........                              ] 25% | 3.12 sec | hypergradient_direct |     [..........                              ] 26% | 3.23 sec | hypergradient_direct |     [..........                              ] 27% | 3.34 sec | hypergradient_direct |     [...........                             ] 28% | 3.45 sec | hypergradient_direct |     [...........                             ] 29% | 3.56 sec | hypergradient_direct |     [............                            ] 30% | 3.66 sec | hypergradient_direct |     [............                            ] 31% | 3.77 sec | hypergradient_direct |     [............                            ] 32% | 3.88 sec | hypergradient_direct |     [.............                           ] 33% | 3.99 sec | hypergradient_direct |     [.............                           ] 34% | 4.10 sec | hypergradient_direct |     [..............                          ] 35% | 4.21 sec | hypergradient_direct |     [..............                          ] 36% | 4.32 sec | hypergradient_direct |     [..............                          ] 37% | 4.43 sec | hypergradient_direct |     [...............                         ] 38% | 4.53 sec | hypergradient_direct |     [...............                         ] 39% | 4.64 sec | hypergradient_direct |     [................                        ] 40% | 4.75 sec | hypergradient_direct |     [................                        ] 41% | 4.86 sec | hypergradient_direct |     [................                        ] 42% | 4.97 sec | hypergradient_direct |     [.................                       ] 43% | 5.08 sec | hypergradient_direct |     [.................                       ] 44% | 5.19 sec | hypergradient_direct |     [..................                      ] 45% | 5.30 sec | hypergradient_direct |     [..................                      ] 46% | 5.41 sec | hypergradient_direct |     [..................                      ] 47% | 5.52 sec | hypergradient_direct |     [...................                     ] 48% | 5.63 sec | hypergradient_direct |     [...................                     ] 49% | 5.74 sec | hypergradient_direct |     [....................                    ] 50% | 5.85 sec | hypergradient_direct |     [....................                    ] 51% | 5.96 sec | hypergradient_direct |     [....................                    ] 52% | 6.07 sec | hypergradient_direct |     [.....................                   ] 53% | 6.18 sec | hypergradient_direct |     [.....................                   ] 54% | 6.28 sec | hypergradient_direct |     [......................                  ] 55% | 6.39 sec | hypergradient_direct |     [......................                  ] 56% | 6.50 sec | hypergradient_direct |     [......................                  ] 57% | 6.61 sec | hypergradient_direct |     [.......................                 ] 58% | 6.72 sec | hypergradient_direct |     [.......................                 ] 59% | 6.83 sec | hypergradient_direct |     [........................                ] 60% | 6.94 sec | hypergradient_direct |     [........................                ] 61% | 7.05 sec | hypergradient_direct |     [........................                ] 62% | 7.16 sec | hypergradient_direct |     [.........................               ] 63% | 7.27 sec | hypergradient_direct |     [.........................               ] 64% | 7.38 sec | hypergradient_direct |     [..........................              ] 65% | 7.49 sec | hypergradient_direct |     [..........................              ] 66% | 7.60 sec | hypergradient_direct |     [..........................              ] 67% | 7.71 sec | hypergradient_direct |     [...........................             ] 68% | 7.82 sec | hypergradient_direct |     [...........................             ] 69% | 7.93 sec | hypergradient_direct |     [............................            ] 70% | 8.04 sec | hypergradient_direct |     [............................            ] 71% | 8.15 sec | hypergradient_direct |     [............................            ] 72% | 8.26 sec | hypergradient_direct |     [.............................           ] 73% | 8.37 sec | hypergradient_direct |     [.............................           ] 74% | 8.48 sec | hypergradient_direct |     [..............................          ] 75% | 8.59 sec | hypergradient_direct |     [..............................          ] 76% | 8.69 sec | hypergradient_direct |     [..............................          ] 77% | 8.80 sec | hypergradient_direct |     [...............................         ] 78% | 8.91 sec | hypergradient_direct |     [...............................         ] 79% | 9.02 sec | hypergradient_direct |     [................................        ] 80% | 9.13 sec | hypergradient_direct |     [................................        ] 81% | 9.24 sec | hypergradient_direct |     [................................        ] 82% | 9.35 sec | hypergradient_direct |     [.................................       ] 83% | 9.46 sec | hypergradient_direct |     [.................................       ] 84% | 9.57 sec | hypergradient_direct |     [..................................      ] 85% | 9.68 sec | hypergradient_direct |     [..................................      ] 86% | 9.79 sec | hypergradient_direct |     [..................................      ] 87% | 9.90 sec | hypergradient_direct |     [...................................     ] 88% | 10.01 sec | hypergradient_direct |     [...................................     ] 89% | 10.12 sec | hypergradient_direct |     [....................................    ] 90% | 10.23 sec | hypergradient_direct |     [....................................    ] 91% | 10.34 sec | hypergradient_direct |     [....................................    ] 92% | 10.45 sec | hypergradient_direct |     [.....................................   ] 93% | 10.55 sec | hypergradient_direct |     [.....................................   ] 94% | 10.66 sec | hypergradient_direct |     [......................................  ] 95% | 10.77 sec | hypergradient_direct |     [......................................  ] 96% | 10.88 sec | hypergradient_direct |     [......................................  ] 97% | 10.99 sec | hypergradient_direct |     [....................................... ] 98% | 11.10 sec | hypergradient_direct |     [....................................... ] 99% | 11.21 sec | hypergradient_direct |     [........................................] 100% | 11.51 sec | hypergradient_direct | 


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 {color: black;background-color: white;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 pre{padding: 0;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-toggleable {background-color: white;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-estimator:hover {background-color: #d4ebff;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-item {z-index: 1;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-parallel-item:only-child::after {width: 0;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-a762d3dd-549e-4c83-b5dc-abee52feabd0 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-a762d3dd-549e-4c83-b5dc-abee52feabd0" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a6d925b6-0c85-440c-b2b3-97772591ba29" type="checkbox" ><label class="sk-toggleable__label" for="a6d925b6-0c85-440c-b2b3-97772591ba29">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columnkernelizer',
                     ColumnKernelizer(transformers=[('space 0', Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    ('space 1', Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    ('space 2', Kernelizer(),
                                                     slice(2000, 3000, None)),
                                                    ('space 3', Kernelizer(),
                                                     slice(3000, 4000, None))])),
                    ('multiplekernelridgecv',
                     MultipleKernelRidgeCV(kernels='precomputed',
                                           solver='hyper_gradient',
                                           solver...
                                                          'initial_deltas': array([[ -3.5570416,  20.620102 ,  22.107693 , ..., -13.436336 ,
             -5.859627 ,   9.107177 ],
           [ -3.7483635,  20.42878  ,  18.778118 , ..., -19.43912  ,
             -6.0509486,   8.915854 ],
           [ -1.3853505,  22.791794 ,  21.70608  , ...,  -5.145227 ,
             -3.6879356,  11.278868 ],
           [ -4.2749796,  19.902164 ,  21.88408  , ...,  -5.4795074,
             -6.5775647,   8.389238 ]], dtype=float32),
                                                          'max_iter': 100,
                                                          'max_iter_inner_hyper': 10}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e1a311ae-bdb6-4047-93f2-959c797aff95" type="checkbox" ><label class="sk-toggleable__label" for="e1a311ae-bdb6-4047-93f2-959c797aff95">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[('space 0', Kernelizer(), slice(0, 1000, None)),
                                   ('space 1', Kernelizer(),
                                    slice(1000, 2000, None)),
                                   ('space 2', Kernelizer(),
                                    slice(2000, 3000, None)),
                                   ('space 3', Kernelizer(),
                                    slice(3000, 4000, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b76a3ba2-ff66-4ac8-910e-f9f2189b832d" type="checkbox" ><label class="sk-toggleable__label" for="b76a3ba2-ff66-4ac8-910e-f9f2189b832d">space 0</label><div class="sk-toggleable__content"><pre>slice(0, 1000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8b496cba-f662-494a-b4c7-d1d256d60854" type="checkbox" ><label class="sk-toggleable__label" for="8b496cba-f662-494a-b4c7-d1d256d60854">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d786f353-900b-4f75-9a12-8873e01f89d7" type="checkbox" ><label class="sk-toggleable__label" for="d786f353-900b-4f75-9a12-8873e01f89d7">space 1</label><div class="sk-toggleable__content"><pre>slice(1000, 2000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e8c947a2-908e-4df0-859b-ac8d59972133" type="checkbox" ><label class="sk-toggleable__label" for="e8c947a2-908e-4df0-859b-ac8d59972133">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f237da6c-00d1-4321-94dd-35e1909ac944" type="checkbox" ><label class="sk-toggleable__label" for="f237da6c-00d1-4321-94dd-35e1909ac944">space 2</label><div class="sk-toggleable__content"><pre>slice(2000, 3000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d1dcf4f7-21bb-42b7-ae23-e3b56d9edb2f" type="checkbox" ><label class="sk-toggleable__label" for="d1dcf4f7-21bb-42b7-ae23-e3b56d9edb2f">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="abf226fc-c12e-45b4-81f4-ae95d5c1ae19" type="checkbox" ><label class="sk-toggleable__label" for="abf226fc-c12e-45b4-81f4-ae95d5c1ae19">space 3</label><div class="sk-toggleable__content"><pre>slice(3000, 4000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0b5eeff4-708e-4140-94bc-b22b262872d9" type="checkbox" ><label class="sk-toggleable__label" for="0b5eeff4-708e-4140-94bc-b22b262872d9">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4720f919-d769-4d5b-ba49-32de21c20a01" type="checkbox" ><label class="sk-toggleable__label" for="4720f919-d769-4d5b-ba49-32de21c20a01">MultipleKernelRidgeCV</label><div class="sk-toggleable__content"><pre>MultipleKernelRidgeCV(kernels='precomputed', solver='hyper_gradient',
                          solver_params={'hyper_gradient_method': 'direct',
                                         'initial_deltas': array([[ -3.5570416,  20.620102 ,  22.107693 , ..., -13.436336 ,
             -5.859627 ,   9.107177 ],
           [ -3.7483635,  20.42878  ,  18.778118 , ..., -19.43912  ,
             -6.0509486,   8.915854 ],
           [ -1.3853505,  22.791794 ,  21.70608  , ...,  -5.145227 ,
             -3.6879356,  11.278868 ],
           [ -4.2749796,  19.902164 ,  21.88408  , ...,  -5.4795074,
             -6.5775647,   8.389238 ]], dtype=float32),
                                         'max_iter': 100,
                                         'max_iter_inner_hyper': 10})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 149-151

Compute predictions on a test set
---------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 151-170

.. code-block:: default

    import matplotlib.pyplot as plt

    # use the first model for all targets
    test_scores_1 = pipe_1.score(X_test, Y_test)

    # use the second model for the refined targets
    test_scores_2 = backend.copy(test_scores_1)
    test_scores_2[mask] = pipe_2.score(X_test, Y_test[:, mask])

    test_scores_1 = backend.to_numpy(test_scores_1)
    test_scores_2 = backend.to_numpy(test_scores_2)
    plt.figure(figsize=(4, 4))
    plt.scatter(test_scores_1, test_scores_2, alpha=0.3)
    plt.plot(plt.xlim(), plt.xlim(), color='k', lw=1)
    plt.xlabel(r"Base model")
    plt.ylabel(r"Refined model")
    plt.title("$R^2$ generalization score")
    plt.tight_layout()
    plt.show()



.. image:: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_refine_results_001.png
    :alt: $R^2$ generalization score
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.877 seconds)


.. _sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_refine_results.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_refine_results.py <plot_refine_results.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_refine_results.ipynb <plot_refine_results.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
